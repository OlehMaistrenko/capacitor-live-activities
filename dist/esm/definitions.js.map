{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"","sourcesContent":["/**\n * Utility type to make complex types more readable in IntelliSense\n */\ntype Prettify<T> = {\n  [K in keyof T]: Prettify<T[K]>;\n} & {};\n\n/**\n * Main interface for Live Activity plugin functionality\n */\nexport interface LiveActivitiesPlugin {\n  /**\n   * Start a new Live Activity\n   * @param options Configuration options for the Live Activity\n   * @returns Promise with the generated activity ID\n   */\n  startActivity(options: LiveActivitiesOptions): Promise<{ activityId: string }>;\n\n  /**\n   * Update an existing Live Activity\n   * @param options Update options including activity ID and new data\n   * @returns Promise that resolves when update is complete\n   */\n  updateActivity(options: UpdateActivityOptions): Promise<void>;\n\n  /**\n   * End a Live Activity\n   * @param options Options including activity ID and final data\n   * @returns Promise that resolves when activity is ended\n   */\n  endActivity(options: EndActivityOptions): Promise<void>;\n\n  /**\n   * Get all active Live Activities\n   * @returns Promise with array of all active activities\n   */\n  getAllActivities(): Promise<{ activities: LiveActivitiesOptions[] }>;\n\n  /**\n   * Save an image for use in Live Activities\n   * @param options Image save options\n   * @returns Promise with success status and image name\n   */\n  saveImage(options: {\n    /** Base64 encoded image data */\n    imageData: string;\n    /** Name to save the image as */\n    name: string;\n    /** Compression quality (0-1), optional */\n    compressionQuality?: number;\n  }): Promise<{ success: boolean; imageName: string }>;\n\n  /**\n   * Remove a saved image\n   * @param options Options with image name to remove\n   * @returns Promise with success status\n   */\n  removeImage(options: { name: string }): Promise<{ success: boolean }>;\n\n  /**\n   * List all saved images\n   * @returns Promise with array of image names\n   */\n  listImages(): Promise<{ images: string[] }>;\n\n  /**\n   * Clean up all saved images\n   * @returns Promise that resolves when cleanup is complete\n   */\n  cleanupImages(): Promise<void>;\n}\n\n/**\n * Configuration options for starting a Live Activity\n */\nexport type LiveActivitiesOptions = {\n  /** Layout configuration for the activity */\n  layout: ActivityLayout;\n  /** Dynamic Island layout configuration (optional) */\n  dynamicIslandLayout: DynamicIslandLayout;\n  /** Behavior configuration for the activity */\n  behavior: LiveActivitiesBehavior;\n  /** Dynamic data to be displayed in the activity */\n  data: Record<string, any>;\n  /** Date when the activity becomes stale (optional) */\n  staleDate?: number;\n  /** Relevance score for activity prioritization (optional) */\n  relevanceScore?: number;\n};\n\n/**\n * Behavior configuration for a Live Activity\n * @category Configuration Types\n * @description Defines how the Live Activity behaves, including whether it should be pinned to the lock screen.\n */\nexport type LiveActivitiesBehavior = {\n  /** @property widgetUrl - URL for the widget */\n  widgetUrl: string;\n  /** @property backgroundTint - Background color for the widget */\n  backgroundTint?: ColorString;\n  /** @property systemActionForegroundColor - Foreground color for system actions */\n  systemActionForegroundColor?: ColorString;\n  /** @property keyLineTint - Color for the key line */\n  keyLineTint?: ColorString;\n};\n\n/**\n * Layout configuration for an activity\n * @category Configuration Types\n * @description The root layout element that defines the structure and appearance of a Live Activity.\n */\nexport type ActivityLayout = LayoutElement;\n\n/**\n * Options for updating an existing Live Activity\n * @category Configuration Types\n * @description Configuration for updating an active Live Activity with new data and optional alert notifications.\n * @example\n * ```typescript\n * const updateOptions: UpdateActivityOptions = {\n *   activityId: \"activity-123\",\n *   data: { progress: 0.75, status: \"In Progress\" },\n *   alertConfiguration: {\n *     title: \"Progress Update\",\n *     body: \"Task is 75% complete\",\n *     sound: \"default\"\n *   }\n * };\n * ```\n */\nexport interface UpdateActivityOptions {\n  /** ID of the activity to update */\n  activityId: string;\n  /** New data for the activity */\n  data: Record<string, any>;\n  /** Alert configuration for the update (optional) */\n  alertConfiguration?: {\n    /** Alert title */\n    title: string;\n    /** Alert body text */\n    body: string;\n    /** Sound to play with alert (optional) */\n    sound?: string;\n  };\n}\n\n/**\n * Options for ending a Live Activity\n * @category Configuration Types\n * @description Configuration for ending an active Live Activity with final data.\n * @example\n * ```typescript\n * const endOptions: EndActivityOptions = {\n *   activityId: \"activity-123\",\n *   data: { status: \"Completed\", finalResult: \"Success\" }\n * };\n * ```\n */\nexport interface EndActivityOptions {\n  /** ID of the activity to end */\n  activityId: string;\n  /** Final data for the activity */\n  data: Record<string, any>;\n}\n\n/**\n * Debug information about Live Activities\n * @category Data Types\n * @description Debugging information containing all active activities and their count.\n */\n\ntype ColorString =\n  | 'primary'\n  | 'secondary'\n  | 'accent'\n  | 'red'\n  | 'blue'\n  | 'green'\n  | 'yellow'\n  | 'orange'\n  | 'purple'\n  | 'pink'\n  | 'black'\n  | 'white'\n  | 'gray'\n  | 'clear'\n  | `#${string}`;\n\n/**\n * Union type representing any layout element with a unique ID\n * @category Layout Elements\n * @description Base type for all layout elements. Every element must have a unique ID and can be one of the supported element types.\n * @example\n * ```typescript\n * const element: LayoutElement = {\n *   type: \"text\",\n *   properties: [\n *     { text: \"Hello World\" }\n *   ]\n * };\n * ```\n */\nexport type LayoutElement = Prettify<\n  | LayoutElementContainer\n  | LayoutElementText\n  | LayoutElementImage\n  | LayoutElementProgress\n  | LayoutElementTimer\n  | LayoutElementChart\n  | LayoutElementSegmentedProgress\n  | LayoutElementSpacer\n  | LayoutElementGauge\n>;\n\n/**\n * Base properties that all layout elements can have as individual objects\n * @category Property Objects\n * @description These properties are available for all layout element types and handle basic positioning, transformations, sizing, and visual effects.\n */\ntype BasePropertyObject =\n  // Positioning\n  /** @property offset - Position offset as coordinates or template string @example { offset: { x: 10, y: 20 } } */\n  | { offset: { x?: number; y?: number } }\n  /** @property zIndex - Z-index for layering @example { zIndex: 1 } */\n  | { zIndex: number }\n\n  // Transformations\n  /** @property opacity - Opacity value (0-1) @example { opacity: 0.8 } */\n  | { opacity: number }\n  /** @property rotation - Rotation in degrees @example { rotation: 45 } */\n  | { rotation: number }\n  /** @property scale - Scale factor (1 = normal size) @example { scale: 1.2 } */\n  | { scale: number }\n\n  // Frame\n  /** @property width - Element width @example { width: 100 } */\n  | { width: number }\n  /** @property height - Element height (-1 means Full) @example { height: 50 } */\n  | { height: number }\n  /** @property maxWidth - Maximum width constraint (-1 means Full) @example { maxWidth: 200 } */\n  | { maxWidth: number }\n  /** @property maxHeight - Maximum height constraint (-1 means Full) @example { maxHeight: 100 } */\n  | { maxHeight: number }\n  /** @property minWidth - Minimum width constraint (-1 means Full) @example { minWidth: 50 } */\n  | { minWidth: number }\n  /** @property minHeight - Minimum height constraint (-1 means Full) @example { minHeight: 25 } */\n  | { minHeight: number }\n  /** @property idealWidth - Ideal width for the element @example { idealWidth: 150 } */\n  | { idealWidth: number }\n  /** @property idealHeight - Ideal height for the element @example { idealHeight: 75 } */\n  | { idealHeight: number }\n  /** @property backgroundGradient - Gradient background configuration @example { backgroundGradient: { colors: [\"#ff0000\", \"#0000ff\"], startPoint: \"top\", endPoint: \"bottom\" } } */\n  | { backgroundGradient: { colors: ColorString[]; startPoint: GradientPoint; endPoint: GradientPoint } }\n  /** @property backgroundCapsule - Background capsule style @example { backgroundCapsule: { foregroundColor: \"#ffffff\" } } */\n  | { backgroundCapsule: { foregroundColor: ColorString } }\n  /** @property paddingVertical - Vertical padding @example { paddingVertical: 12 } */\n  | { paddingVertical: number }\n  /** @property paddingHorizontal - Horizontal padding @example { paddingHorizontal: 16 } */\n  | { paddingHorizontal: number }\n  /** @property multilineTextAlignment - Text alignment for multiline text @example { multilineTextAlignment: \"center\" } */\n  | { multilineTextAlignment: 'leading' | 'center' | 'trailing' | 'left' | 'right' }\n  /** @property padding - Padding inside the container @example { padding: 16 } */\n  | { padding: number | boolean }\n\n  // Effects\n  /** @property shadow - Shadow configuration @example { shadow: { color: \"#000000\", radius: 5, x: 2, y: 2 } } */\n  | { shadow: { color?: ColorString; radius?: number; x?: number; y?: number } };\n\n/**\n * Container-specific property objects\n * @category Property Objects\n * @description Properties specific to container elements, including layout direction, spacing, styling, and background effects.\n * @extends xxx\n */\ntype ContainerPropertyObject =\n  | (BasePropertyObject | ContainerPropertyObjectBase | ContainerPropertyObjectVertical)[]\n  | (BasePropertyObject | ContainerPropertyObjectBase | ContainerPropertyObjectHorizontal)[]\n  | (BasePropertyObject | ContainerPropertyObjectBase | ContainerPropertyObjectStack)[];\n\ntype ContainerPropertyObjectBase =\n  /** @property spacing - Spacing between child elements @example { spacing: 12 } */\n  | { spacing: number }\n  /** @property foregroundColor - Foreground color style of container @example { foregroundColor: \"#ffffff\" } */\n  | { foregroundColor: ColorString }\n  /** @property backgroundColor - Background color of the container @example { backgroundColor: \"#000000\" } */\n  | { backgroundColor: ColorString }\n  /** @property cornerRadius - Corner radius for rounded corners @example { cornerRadius: 8 } */\n  | { cornerRadius: number }\n  /** @property borderWidth - Border width @example { borderWidth: 2 } */\n  | { borderWidth: number }\n  /** @property borderColor - Border color @example { borderColor: \"#cccccc\" } */\n  | { borderColor: ColorString }\n  /** @property insideAlignment - Frame alignment within the container @example { insideAlignment: \"center\" } */\n  | { alignment: ContainerPropertyObjectStackAlignment };\n\ntype ContainerPropertyObjectHorizontal =\n  /** @property direction - Container layout direction @example { direction: \"horizontal\" / HStack } */\n  | { direction: 'horizontal' }\n  /** @property alignment - Vertical alignment within container @example { alignment: \"center\" } */\n  | { insideAlignment: 'bottom' | 'center' | 'first-text-baseline' | 'last-text-baseline' | 'top' };\n\ntype ContainerPropertyObjectVertical =\n  /** @property direction - Container layout direction @example { direction: \"vertical\" / VStack } */\n  | { direction: 'vertical' }\n  /** @property alignment - Horizontal alignment within container @example { alignment: \"center\" } */\n  | {\n      insideAlignment:\n        | 'center'\n        | 'leading'\n        | 'left'\n        | 'list-row-separator-leading'\n        | 'list-row-separator-trailing'\n        | 'list-row-separator-left'\n        | 'list-row-separator-right'\n        | 'trailing'\n        | 'right';\n    };\n\ntype ContainerPropertyObjectStackAlignment =\n  | 'top'\n  | 'top-leading'\n  | 'top-trailing'\n  | 'top-left'\n  | 'top-right'\n  | 'bottom'\n  | 'bottom-left'\n  | 'bottom-right'\n  | 'center'\n  | 'center-first-text-baseline'\n  | 'center-last-text-baseline'\n  | 'leading'\n  | 'leading-first-text-baseline'\n  | 'leading-last-text-baseline'\n  | 'left'\n  | 'left-first-text-baseline'\n  | 'left-last-text-baseline'\n  | 'trailing'\n  | 'trailing-first-text-baseline'\n  | 'trailing-last-text-baseline'\n  | 'right'\n  | 'right-first-text-baseline'\n  | 'right-last-text-baseline';\n\ntype ContainerPropertyObjectStack =\n  /** @property direction - Container layout direction @example { direction: \"stack\" / ZStack } */\n  | { direction: 'stack' }\n  /** @property alignment - Alignment within container @example { alignment: \"center\" } */\n  | {\n      insideAlignment: ContainerPropertyObjectStackAlignment;\n    };\n/**\n * Text-specific property objects\n * @category Property Objects\n * @description Properties specific to text elements, including content, typography, styling, and text formatting options.\n * @extends BasePropertyObject\n */\ntype TextPropertyObject =\n  | BasePropertyObject\n  /** @property text - Text content to display @example { text: \"Hello World\" } */\n  | { text: string }\n  /** @property fontSize - Font size @example { fontSize: 16 } */\n  | { fontSize: number }\n  /** @property fontWeight - Font weight @example { fontWeight: \"bold\" } */\n  | { fontWeight: 'regular' | 'medium' | 'semibold' | 'bold' | 'heavy' | 'light' | 'thin' | 'black' }\n  /** @property fontFamily - Font family name @example { fontFamily: \"Helvetica\" } */\n  | {\n      fontFamily:\n        | 'caption'\n        | 'title'\n        | 'headline'\n        | 'body'\n        | 'callout'\n        | 'caption2'\n        | 'footnote'\n        | 'largeTitle'\n        | 'subheadline'\n        | 'title2'\n        | 'title3';\n    }\n  /** @property color - Text color @example { color: \"#333333\" } */\n  | { color: ColorString }\n  /** @property alignment - Text alignment @example { alignment: \"center\" } */\n  | { alignment: 'leading' | 'center' | 'trailing' | 'left' | 'right' }\n  /** @property lineLimit - Maximum number of lines @example { lineLimit: 2 } */\n  | { lineLimit: number }\n  /** @property italic - Whether text is italic @example { italic: true } */\n  | { italic: boolean }\n  /** @property underline - Whether text is underlined @example { underline: true } */\n  | { underline: boolean }\n  /** @property strikethrough - Whether text has strikethrough @example { strikethrough: false } */\n  | { strikethrough: boolean }\n  /** @property monospacedDigit - Whether to use monospaced digits @example { monospacedDigit: true } */\n  | { monospacedDigit: boolean };\n\n/**\n * Image-specific property objects\n * @category Property Objects\n * @description Properties specific to image elements, including display options, source configuration, and image styling.\n * @extends BasePropertyObject\n */\ntype ImagePropertyObject =\n  | BasePropertyObject\n  /** @property contentMode - How the image should fit within its bounds @example { contentMode: \"fit\" } */\n  | { contentMode: 'fit' | 'fill' }\n  /** @property cornerRadius - Corner radius for rounded image corners @example { cornerRadius: 12 } */\n  | { cornerRadius: number }\n  /** @property systemName - SF Symbols system name @example { systemName: \"heart.fill\" } */\n  | { systemName: string }\n  /** @property color - Color tint for SF Symbols @example { color: \"#ff0000\" } */\n  | { color: ColorString }\n  /** @property url - Remote image URL @example { url: \"https://example.com/image.jpg\" } */\n  | { url: string }\n  /** @property appGroup - App Group container identifier for saved images @example { appGroup: \"group.com.example.app\" } */\n  | { appGroup: string }\n  /** @property asset - Asset name from app bundle @example { asset: \"logo\" } */\n  | { asset: string }\n  /** @property base64 - Base64 encoded image data @example { base64: \"iVBORw0KGgoAAAANSUhEUgAA...\" } */\n  | { base64: string }\n  /** @property resizable - Whether the image is resizable @example { resizable: true } */\n  | { resizable: boolean };\n\n/**\n * Progress-specific property objects\n * @category Property Objects\n * @description Properties specific to progress bar elements, including value configuration, styling, and appearance options.\n * @extends BasePropertyObject\n */\ntype ProgressPropertyObject =\n  | BasePropertyObject\n  /** @property value - Current progress value @example { value: 0.7 } */\n  | { value: number }\n  /** @property total - Total/maximum value for progress calculation @example { total: 100 } */\n  | { total: number }\n  /** @property color - Progress bar fill color @example { color: \"#00ff00\" } */\n  | { color: ColorString }\n  /** @property backgroundColor - Progress bar background color @example { backgroundColor: \"#f0f0f0\" } */\n  | { backgroundColor: ColorString }\n  /** @property height - Height of the progress bar @example { height: 8 } */\n  | { height: number };\n\n/**\n * Timer-specific property objects\n * @category Property Objects\n * @description Properties specific to timer elements, including time configuration, display style, and formatting options.\n * @extends BasePropertyObject\n */\ntype TimerPropertyObject =\n  | TextPropertyObject\n  /** @property endTime - End time as timestamp in milliseconds @example { endTime: 1749337396616 } */\n  | { endTime: number }\n  /** @property style - Timer display style @example { style: \"timer\" } */\n  | { style: 'timer' | 'relative' | 'date' | 'time' | 'offset' | 'countdown' };\n\n/**\n * Container element that can hold other layout elements\n * @category Layout Elements\n * @description A container element that organizes child elements in various layouts (vertical, horizontal, or stack).\n * Containers support spacing, padding, backgrounds, borders, and gradients.\n * @example\n * ```typescript\n * const container: LayoutElementContainer = {\n *   type: \"container\",\n *   properties: [\n *     { direction: \"vertical\" },\n *     { spacing: 12 },\n *     { padding: 16 },\n *     { backgroundColor: \"#f0f0f0\" }\n *   ],\n *   children: [textElement, imageElement]\n * };\n * ```\n */\nexport type LayoutElementContainer = Prettify<{\n  /** Element type identifier */\n  type: 'container';\n  /** Container properties as array of property objects */\n  properties?: ContainerPropertyObject;\n  /** Child elements contained within this container */\n  children: LayoutElement[];\n}>;\n\n/**\n * Background Gradient point options for defining gradient direction\n * @category Enums\n * @description Predefined points for gradient start and end positions.\n * @example\n * ```typescript\n * const backgroundGradient = {\n *   colors: [\"#ff0000\", \"#0000ff\"],\n *   startPoint: \"top\" as GradientPoint,\n *   endPoint: \"bottom\" as GradientPoint\n * };\n * ```\n */\ntype GradientPoint =\n  /** @option top - Top edge */\n  | 'top'\n  /** @option bottom - Bottom edge */\n  | 'bottom'\n  /** @option leading - Leading edge (left in LTR, right in RTL) */\n  | 'leading'\n  /** @option trailing - Trailing edge (right in LTR, left in RTL) */\n  | 'trailing'\n  /** @option topLeading - Top-left corner */\n  | 'topLeading'\n  /** @option topTrailing - Top-right corner */\n  | 'topTrailing'\n  /** @option bottomLeading - Bottom-left corner */\n  | 'bottomLeading'\n  /** @option bottomTrailing - Bottom-right corner */\n  | 'bottomTrailing'\n  /** @option center - Center point */\n  | 'center';\n\n/**\n * Text element for displaying text content\n * @category Layout Elements\n * @description A text element for displaying styled text with typography controls, alignment, and formatting options.\n * @example\n * ```typescript\n * const textElement: LayoutElementText = {\n *   type: \"text\",\n *   properties: [\n *     { text: \"Welcome to Live Activities\" },\n *     { fontSize: 18 },\n *     { fontWeight: \"bold\" },\n *     { color: \"#333333\" },\n *     { alignment: \"center\" }\n *   ]\n * };\n * ```\n */\nexport type LayoutElementText = Prettify<{\n  /** Element type identifier */\n  type: 'text';\n  /** Text properties as array of property objects */\n  properties: TextPropertyObject[];\n}>;\n\n/**\n * Image element for displaying images from various sources\n * @category Layout Elements\n * @description An image element that can display images from URLs, SF Symbols, app assets, base64 data, or saved images.\n * @example\n * ```typescript\n * const imageElement: LayoutElementImage = {\n *   type: \"image\",\n *   properties: [\n *     { url: \"https://example.com/avatar.jpg\" },\n *     { contentMode: \"fit\" },\n *     { cornerRadius: 25 },\n *     { width: 50 },\n *     { height: 50 }\n *   ]\n * };\n * ```\n */\nexport type LayoutElementImage = Prettify<{\n  /** Element type identifier */\n  type: 'image';\n  /** Image properties as array of property objects */\n  properties: ImagePropertyObject[];\n}>;\n\n/**\n * Progress bar element for showing completion progress\n * @category Layout Elements\n * @description A progress bar element for visualizing completion status with customizable styling and values.\n * @example\n * ```typescript\n * const progressElement: LayoutElementProgress = {\n *   type: \"progress\",\n *   properties: [\n *     { value: 0.75 },\n *     { total: 1.0 },\n *     { color: \"#00ff00\" },\n *     { backgroundColor: \"#cccccc\" },\n *     { height: 8 }\n *   ]\n * };\n * ```\n */\nexport type LayoutElementProgress = Prettify<{\n  /** Element type identifier */\n  type: 'progress';\n  /** Progress bar properties as array of property objects */\n  properties: ProgressPropertyObject[];\n}>;\n\n/**\n * Timer element for displaying countdown or time information\n * @category Layout Elements\n * @description A timer element for showing countdown timers, relative time, or formatted dates with various display styles.\n * @example\n * ```typescript\n * const timerElement: LayoutElementTimer = {\n *   type: \"timer\",\n *   properties: [\n *     { endTime: Date.now() + 3600000 }, // 1 hour from now\n *     { style: \"timer\" },\n *     { fontSize: 16 },\n *     { color: \"#ff0000\" }\n *   ]\n * };\n * ```\n */\nexport type LayoutElementTimer = Prettify<{\n  /** Element type identifier */\n  type: 'timer';\n  /** Timer properties as array of property objects */\n  properties: TimerPropertyObject[];\n}>;\n\nexport type LayoutElementChart = Prettify<{\n  /** Element type identifier */\n  type: 'chart';\n  /** Chart properties as array of property objects */\n  properties: ChartPropertyObject[];\n}>;\n\n/**\n * Chart-specific property objects\n * @category Property Objects\n * @description Properties specific to chart elements, including data series, styling, and chart type.\n * @extends BasePropertyObject\n */\ntype ChartPropertyObject =\n  | BasePropertyObject\n  /** @property type - Type of chart (e.g., \"line\", \"bar\", \"pie\") @example { type: \"line\" } */\n  | { type: 'line' | 'bar' | 'pie' | 'area' | 'scatter' }\n  /** @property data - Data series for the chart @example { data: [{ x: 1, y: 2 }, { x: 2, y: 3 }] } */\n  | { data: Array<{ x: number; y: number }> }\n  /** @property width - Width of the chart @example { width: 300 } */\n  | { width: number }\n  /** @property height - Height of the chart @example { height: 200 } */\n  | { height: number }\n  /** @property color - Color of the chart lines/bars @example { color: \"#007AFF\" } */\n  | { color: ColorString }\n  /** @property fillColor - Fill color for area charts @example { fillColor: \"#007AFF\" } */\n  | { fillColor: ColorString }\n  /** @property strokeWidth - Width of the chart lines @example { strokeWidth: 2 } */\n  | { strokeWidth: number }\n  /** @property showPoints - Whether to show data points on the chart @example { showPoints: true } */\n  | { showPoints: boolean }\n  /** @property pointRadius - Radius of data points @example { pointRadius: 4 } */\n  | { smooth: boolean }\n  /** @property smooth - Whether to smooth the lines in line charts @example { smooth: true } */\n  | { maxValue: number };\n\n/**\n * Segmented Progress bar element for showing progress in segments\n * @category Layout Elements\n * @description A segmented progress bar element that displays progress divided into segments with customizable styling.\n * @example\n * ```typescript\n * const segmentedProgressElement: LayoutElementSegmentedProgress = {\n *   type: \"segmented-progress\",\n *   properties: [\n *     { segments: 5 },\n *     { filled: 3 },\n *     { spacing: 4 },\n *     { height: 6 },\n *     { cornerRadius: 3 },\n *     { filledColor: \"#007AFF\" },\n *     { unfilledColor: \"#2C2C2E\" },\n *     { strokeColor: \"#FFFFFF\" },\n *     { strokeDashed: true },\n *     { strokeWidth: 1 }\n *   ]\n * };\n * ```\n */\nexport type LayoutElementSegmentedProgress = Prettify<{\n  /** Element type identifier */\n  type: 'segmented-progress';\n  /** Segmented progress bar properties as array of property objects */\n  properties: SegmentedProgressPropertyObject[];\n}>;\n\n/**\n * Segmented-progress property objects\n * @category Property Objects\n * @description Properties specific to segmented progress bar elements, including segment count, filled segments, spacing, height, corner radius, and colors.\n * @extends BasePropertyObject\n */\ntype SegmentedProgressPropertyObject =\n  | BasePropertyObject\n  /** @property segments - Total number of segments in the progress bar @example { segments: 5 } */\n  | { segments: number }\n  /** @property filled - Number of filled segments @example { filled: 3 } */\n  | { filled: number }\n  /** @property spacing - Spacing between segments @example { spacing: 4 } */\n  | { spacing: number }\n  /** @property height - Height of the segmented progress bar @example { height: 6 } */\n  | { height: number }\n  /** @property cornerRadius - Corner radius for rounded corners @example { cornerRadius: 3 } */\n  | { cornerRadius: number }\n  /** @property filledColor - Color of filled segments @example { filledColor: \"#007AFF\" } */\n  | { filledColor: ColorString }\n  /** @property unfilledColor - Color of unfilled segments @example { unfilledColor: \"#2C2C2E\" } */\n  | { unfilledColor: ColorString }\n  /** @property strokeColor - Color of the segment stroke @example { strokeColor: \"#FFFFFF\" } */\n  | { strokeColor: ColorString }\n  /** @property strokeDashed - Whether the segment stroke is dashed @example { strokeDashed: true } */\n  | { strokeDashed: boolean }\n  /** @property strokeWidth - Width of the segment stroke @example { strokeWidth: 1 } */\n  | { strokeWidth: number };\n\n/**\n * Spacer-specific property objects\n * @category Property Objects\n * @description Properties specific to spacer elements.\n * @extends BasePropertyObject\n */\ntype SpacerPropertyObject =\n  | BasePropertyObject\n  /** @property minLength - Minimum spacing @example { minLength: 8 } */\n  | { minLength: number };\n\n\n/**\n * Gauge-specific property objects\n * @category Property Objects\n * @description Properties specific to gauge elements, including value configuration, angle settings, styling, and display options.\n * @extends BasePropertyObject\n */\ntype GaugePropertyObject =\n  | BasePropertyObject\n  /** @property value - Current value (required) @example { value: 75 } */\n  | { value: number | string }\n  /** @property minValue - Minimum value @example { minValue: 0 } */\n  | { minValue: number }\n  /** @property maxValue - Maximum value @example { maxValue: 100 } */\n  | { maxValue: number }\n  /** @property startAngle - Start angle in degrees @example { startAngle: -90 } */\n  | { startAngle: number }\n  /** @property endAngle - End angle in degrees @example { endAngle: 270 } */\n  | { endAngle: number }\n  /** @property strokeWidth - Line thickness @example { strokeWidth: 8 } */\n  | { strokeWidth: number }\n  /** @property foregroundColor - Progress color @example { foregroundColor: \"#007AFF\" } */\n  | { foregroundColor: ColorString }\n  /** @property backgroundColor - Track color @example { backgroundColor: \"#E5E5EA\" } */\n  | { backgroundColor: ColorString }\n  /** @property showsCurrentValueLabel - Show value text @example { showsCurrentValueLabel: true } */\n  | { showsCurrentValueLabel: boolean };\n\n/**\n * Spacer element for creating flexible spacing between elements\n * @category Layout Elements\n * @description A spacer element that creates flexible spacing with configurable minimum/maximum constraints and expansion priority.\n * @example\n * ```typescript\n * const spacerElement: LayoutElementSpacer = {\n *   type: \"spacer\",\n *   properties: [\n *     { minLength: 8 },\n *     { maxLength: 32 },\n *     { priority: \"medium\" }\n *   ]\n * };\n * ```\n */\nexport type LayoutElementSpacer = Prettify<{\n  /** Element type identifier */\n  type: 'spacer';\n  /** Spacer properties as array of property objects */\n  properties?: SpacerPropertyObject[];\n}>;\n\n/**\n * Gauge element for displaying circular progress indicators\n * @category Layout Elements\n * @description A gauge element that displays circular progress with customizable angles, colors, and value display options.\n * @example\n * ```typescript\n * const gaugeElement: LayoutElementGauge = {\n *   type: \"gauge\",\n *   properties: [\n *     { value: 75 },\n *     { minValue: 0 },\n *     { maxValue: 100 },\n *     { startAngle: -90 },\n *     { endAngle: 270 },\n *     { strokeWidth: 8 },\n *     { foregroundColor: \"#30D158\" },\n *     { backgroundColor: \"#2C2C2E\" },\n *     { showsCurrentValueLabel: true }\n *   ]\n * };\n * ```\n */\nexport type LayoutElementGauge = Prettify<{\n  /** Element type identifier */\n  type: 'gauge';\n  /** Gauge properties as array of property objects */\n  properties: GaugePropertyObject[];\n}>;\n\n/**\n * Dynamic Island layout configuration for different states\n */\nexport interface DynamicIslandLayout {\n  /** Expanded state layout with multiple areas */\n  expanded: {\n    /** Leading area element */\n    leading?: LayoutElement;\n    /** Trailing area element */\n    trailing?: LayoutElement;\n    /** Center area element */\n    center?: LayoutElement;\n    /** Bottom area element */\n    bottom?: LayoutElement;\n  };\n  /** Compact leading state configuration */\n  compactLeading: LayoutElement;\n  /** Compact trailing state configuration */\n  compactTrailing: LayoutElement;\n  /** Minimal state configuration */\n  minimal: LayoutElement;\n}\n"]}